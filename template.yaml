AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  CFC Record Keeper
  It keeps records

Parameters:
  RecordKeeperAuthJsonEnv:
    Description: Required. json data defining the auth environments
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'RecordKeeperAuthJsonEnv'

Globals:
  Function:
    Timeout: 10
    Runtime: python3.8

Resources:
  CFCRecordKeeperApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        DefaultAuthorizer: RecordKeeperRequestAuthorizer
        Authorizers:
          RecordKeeperRequestAuthorizer:
            FunctionArn: !GetAtt CFCRecordKeeperAuthFunction.Arn
            AuthorizerPayloadFormatVersion: 2.0
            EnableSimpleResponses: true
            Identity:
              Headers:
                - Authorization
  # Auth
  CFCRecordKeeperAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/auth/
      Handler: authorizer.handler
      Environment:
        Variables:
          JSON_ENV: !Ref RecordKeeperAuthJsonEnv

  RecordLake:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: cfc-record-keeper
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

      LifecycleConfiguration:
        Rules:
          - Id: RecordExpirationRule
            Status: Enabled
            ExpirationInDays: 60

  # Store Record
  CFCStoreRecord:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/store_record/
      Handler: app.lambda_handler
      Events:
        CFCStoreRecord:
          Type: HttpApi
          Properties:
            ApiId: !Ref CFCRecordKeeperApi
            Method: POST
            Path: /store-record
      Policies:
        - Statement:
            - Sid: RecordKeeperWriteRecordPolicy
              Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:PutLifecycleConfiguration
                - s3:AbortMultipartUpload
              Resource: !Join
                - ''
                -
                  - !GetAtt RecordLake.Arn
                  - /*

  # Store Records
  CFCStoreRecords:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/store_records/
      Handler: app.lambda_handler
      Environment:
        Variables:
          CFCRecordTopic: !Ref CFCRecordTopic
      Events:
        CFCStoreRecords:
          Type: HttpApi
          Properties:
            ApiId: !Ref CFCRecordKeeperApi
            Method: POST
            Path: /store-records
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt CFCRecordTopic.TopicName

  # Save Records
  CFCSaveRecords:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/save_records/
      Handler: app.lambda_handler
      Events:
        CFCSaveRecord:
          Type: SNS
          Properties:
            Topic: !Ref CFCRecordTopic
      Policies:
        - Statement:
            - Sid: RecordKeeperWriteRecordsPolicy
              Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:PutLifecycleConfiguration
                - s3:AbortMultipartUpload
              Resource: !Join
                - ''
                -
                  - !GetAtt RecordLake.Arn
                  - /*

  CFCRecordTopic:
    Type: AWS::SNS::Topic
