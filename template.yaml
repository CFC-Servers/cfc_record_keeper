AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  CFC Record Keeper
  It keeps records

Parameters:
  RecordKeeperAuthJsonEnv:
    Description: Required. json data defining the auth environments
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'RecordKeeperAuthJsonEnv'

Globals:
  Function:
    Timeout: 10
    Runtime: python3.8

Resources:
  CFCRecordKeeperApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        DefaultAuthorizer: RecordKeeperRequestAuthorizer
        Authorizers:
          RecordKeeperRequestAuthorizer:
            FunctionArn: !GetAtt CFCRecordKeeperAuthFunction.Arn
            AuthorizerPayloadFormatVersion: 2.0
            EnableSimpleResponses: true
            Identity:
              Headers:
                - Authorization
  # Auth
  CFCRecordKeeperAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/auth/
      Handler: authorizer.handler
      Environment:
        Variables:
          JSON_ENV: !Ref RecordKeeperAuthJsonEnv

  # Record Storage
  RecordLake:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: cfc-record-keeper
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

      LifecycleConfiguration:
        Rules:
          - Id: RecordExpirationRule
            Status: Enabled
            ExpirationInDays: 21

  # Bulk Store Records (Triggered by API call)
  CFCStoreRecords:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/store_records/
      Handler: app.lambda_handler
      Environment:
        Variables:
          CFCRecordTopic: !Ref CFCRecordTopic
      Events:
        CFCStoreRecords:
          Type: HttpApi
          Properties:
            ApiId: !Ref CFCRecordKeeperApi
            Method: POST
            Path: /store-records
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt CFCRecordTopic.TopicName

  # Bulk Save Records (Triggered by SNS)
  CFCSaveRecords:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/save_records/
      Handler: app.lambda_handler
      Events:
        CFCSaveRecord:
          Type: SNS
          Properties:
            Topic: !Ref CFCRecordTopic
      Policies:
        - Statement:
            - Sid: RecordKeeperWriteRecordsPolicy
              Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:PutLifecycleConfiguration
                - s3:AbortMultipartUpload
              Resource: !Join
                - ''
                -
                  - !GetAtt RecordLake.Arn
                  - /*

  # Storage for CloudTrail Access watcher
  CFCRecordAccessLogs:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: cfc-record-keeper-access-logs

  CFCRecordAccessLogGroup:
    Type: AWS::Logs::LogGroup

  CFCRecordAccessLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com

  CFCRecordAccessLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CFCRecordAccessLogsCloudTrailCreate
      PolicyDocument:
        Statement:
          - Action:
              - logs:PutLogEvent
              - logs:CreateLogStream
            Effect: Allow
            Resource: !GetAtt CFCRecordAccessLogGroup.Arn
      Roles:
        - !Ref CFCRecordAccessLogsRole

  # CloudTrail watching for Access Events
  CFCRecordAccessTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn:
      - CFCRecordAccessLogs
      - CFCRecordAccessLogsRole
      - CFCRecordAccessLogsPolicy
    Properties:
      IsLogging: true
      TrailName: CFCRecordAccessTrail
      CloudWatchLogsLogGroupArn: !GetAtt CFCRecordAccessLogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt CFCRecordAccessLogsRole.Arn
      SnsTopicName: !GetAtt CFCRecordAccessTopic.TopicName
      S3BucketName: !Ref CFCRecordAccessLogs
      EventSelectors:
        - DataResources:
            - Type: AWS::S3::Object
              Values:
                - !GetAtt RecordLake.Arn
          IncludeManagementEvents: true
          ReadWriteType: ReadOnly

  # Function to parse the Access Events
  CFCRecordAccessRelay:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/read_relay/
      Handler: app.lambda_handler
      Events:
        CFCRelayAccessEvent:
          Type: SNS
          Properties:
            Topic: !Ref CFCRecordAccessTopic

  # SNS Topic to trigger saving
  CFCRecordTopic:
    Type: AWS::SNS::Topic

  # SNS Topic to trigger access alerts
  CFCRecordAccessTopic:
    Type: AWS::SNS::Topic
